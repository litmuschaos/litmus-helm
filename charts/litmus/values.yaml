# Default values for litmus.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

portalScope: cluster

nameOverride: ""

# -- Additional labels
customLabels:
  {}
  # my.company.com/concourse-cd: 2

adminConfig:
  DBUSER: "admin"
  DBPASSWORD: "1234"
  JWTSecret: "litmus-portal@123"
  VERSION: "2.6.0"
  SKIP_SSL_VERIFY: "false"
  # -- leave empty if uses Mongo DB deployed by this chart
  DB_SERVER: ""
  DB_PORT: "27017"
  ADMIN_USERNAME: "admin"
  ADMIN_PASSWORD: "litmus"

image:
  imageRegistryName: litmuschaos
  # Optional pod imagePullSecrets
  imagePullSecrets: []

ingress:
  enabled: false
  name: litmus-ingress
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/rewrite-target: /$1

  host:
    # -- This is ingress hostname (ex: my-domain.com)
    name: ""
    paths:
      # -- You may need adapt the path depending your ingress-controller
      frontend: /(.*)
      # -- You may need adapt the path depending your ingress-controller
      backend: /backend/(.*)
  tls: []
  #  - secretName: chart-example-tls
  #    hosts: []

upgradeAgent:
  controlPlane:
    image:
      repository: upgrade-agent-cp
      tag: "2.6.0"
      pullPolicy: "Always"
    restartPolicy: OnFailure
  nodeSelector: {}
  tolerations: []
  affinity: {}

portal:
  frontend:
    replicas: 1
    updateStrategy: {}
    ## Strategy for deployment updates.
    ##
    ## Example:
    ##
    ##   strategy:
    ##     type: RollingUpdate
    ##     rollingUpdate:
    ##       maxSurge: 1
    ##       maxUnavailable: 25%
    automountServiceAccountToken: false
    securityContext:
      runAsUser: 2000
      allowPrivilegeEscalation: false
      runAsNonRoot: true
    image:
      repository: litmusportal-frontend
      tag: 2.6.0
      pullPolicy: "Always"
    containerPort: 8080
    customLabels: {}
    # my.company.com/tier: "frontend"

    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      requests:
        memory: "300Mi"
        cpu: "125m"
        ephemeral-storage: "500Mi"
      limits:
        memory: "500Mi"
        cpu: "520m"
        ephemeral-storage: "1Gi"
    livenessProbe:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    service:
      annotations: {}
      type: NodePort
      port: 9091
      targetPort: 8080
    virtualService:
      enabled: false
      hosts: []
      gateways: []
    nodeSelector: {}
    tolerations: []
    affinity: {}

  server:
    replicas: 1
    updateStrategy: {}
    ## Strategy for deployment updates.
    ##
    ## Example:
    ##
    ##   strategy:
    ##     type: RollingUpdate
    ##     rollingUpdate:
    ##       maxSurge: 1
    ##       maxUnavailable: 25%
    serviceAccountName: litmus-server-account
    customLabels: {}
    # my.company.com/tier: "backend"
    waitForMongodb:
      image:
        repository: curl
        tag: 2.5.0
        pullPolicy: "Always"
      resources:
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        requests:
          memory: "300Mi"
          cpu: "125m"
          ephemeral-storage: "500Mi"
        limits:
          memory: "712Mi"
          cpu: "525m"
          ephemeral-storage: "1Gi"

    graphqlServer:
      securityContext:
        runAsUser: 2000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
      image:
        repository: litmusportal-server
        tag: 2.6.0
        pullPolicy: "Always"
      ports:
        - name: gql-server
          containerPort: 8080
        - name: gql-rpc-server
          containerPort: 8000
      imageEnv:
        SUBSCRIBER_IMAGE: "litmusportal-subscriber:2.6.0"
        EVENT_TRACKER_IMAGE: "litmusportal-event-tracker:2.6.0"
        ARGO_WORKFLOW_CONTROLLER_IMAGE: "workflow-controller:v3.2.3"
        ARGO_WORKFLOW_EXECUTOR_IMAGE: "argoexec:v3.2.3"
        LITMUS_CHAOS_OPERATOR_IMAGE: "chaos-operator:2.5.0"
        LITMUS_CHAOS_RUNNER_IMAGE: "chaos-runner:2.5.0"
        LITMUS_CHAOS_EXPORTER_IMAGE: "chaos-exporter:2.5.0"
      genericEnv:
        TLS_SECRET_NAME: ""
        TLS_CERT_64: ""
        SELF_CLUSTER: "true"
        CONTAINER_RUNTIME_EXECUTOR: "k8sapi"
        HUB_BRANCH_NAME: "v2.5.x"
        AGENT_DEPLOYMENTS: '["app=chaos-exporter", "name=chaos-operator", "app=event-tracker", "app=workflow-controller"]'

      resources:
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        requests:
          memory: "500Mi"
          cpu: "125m"
          ephemeral-storage: "500Mi"
        limits:
          memory: "712Mi"
          cpu: "550m"
          ephemeral-storage: "1Gi"
      livenessProbe:
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    authServer:
      securityContext:
        runAsUser: 2000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
      image:
        repository: litmusportal-auth-server
        tag: 2.6.0
        pullPolicy: "Always"
      ports:
        - name: auth-server
          containerPort: 3030
        - name: auth-rpc-server
          containerPort: 3000
      env: {}
      resources:
        # We usually recommend not to specify default resources and to leave this as a conscious
        # choice for the user. This also increases chances charts run on environments with little
        # resources, such as Minikube. If you do want to specify resources, uncomment the following
        # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
        requests:
          memory: "300Mi"
          cpu: "125m"
          ephemeral-storage: "500Mi"
        limits:
          memory: "712Mi"
          cpu: "525m"
          ephemeral-storage: "1Gi"
    service:
      annotations: {}
      type: NodePort
      graphqlServer:
        port: 9002
        targetPort: 8080
      graphqlRpcServer:
        port: 8000
        targetPort: 8000
      authServer:
        port: 9003
        targetPort: 3000
      authRpcServer:
        port: 3030
        targetPort: 3030
    nodeSelector: {}
    tolerations: []
    affinity: {}

mongo:
  replicas: 1
  customLabels:
    {}
    # my.company.com/tier: "database"
  automountServiceAccountToken: false
  securityContext:
    # runAsUser: 2000
    allowPrivilegeEscalation: false
    # runAsNonRoot: true
  image:
    repository: mongo
    tag: 4.2.8
    pullPolicy: "Always"
  containerPort: 27017
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    requests:
      memory: "300Mi"
      cpu: "225m"
      ephemeral-storage: "1Gi"
    limits:
      memory: "712Mi"
      cpu: "550m"
      ephemeral-storage: "3Gi"
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  persistence:
    size: 20Gi
    accessMode: ReadWriteOnce
    # storageClass: ""
  service:
    type: ClusterIP
    port: 27017
    targetPort: 27017
  # Service account to be used by mongo pods
  # serviceAccountName: "mongo-service-account"
  nodeSelector: {}
  tolerations: []
  affinity: {}

# OpenShift specific configuration
openshift:
  # If service should be exposed using an OpenShift route
  route:
    enabled: false
    name: litmus-portal
    annotations: {}
    host: ""
